/**
 *Title:             My text editor
 * Files:            TextEditorFrame.java
 * Semester:         LAB Desk Summer- Block 5 2021
 * Author:           TuyenNH
 * Email:            tuyennhhe141159@fpt.edu.vn
 * CS Login:         User
 * Lecturer's Name:  DuongTB
 * Lab Section:      4
 */
package view;

import controller.TextEditorController;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.UndoableEditEvent;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.undo.UndoManager;

/**
 *
 * @author User
 */
public class TextEditorFrame extends javax.swing.JFrame {

    //create object controller
    TextEditorController fileController = new TextEditorController();

    //Variable to check file is saved or not yet 
    boolean isSave = true;

    //create object UndoManager
    UndoManager undoManager = new UndoManager();

    //variable defaultPath, use when user want to save file (not save as)
    String defaultPath = "C:\\Users\\User\\Documents";

    /**
     * Creates new form TextEditorFrame
     */
    public TextEditorFrame() {
        initComponents();
        newFile();
    }

    public JTextArea getTxtDisplay() {
        return txtDisplay;
    }

    public void setTxtDisplay(JTextArea txtDisplay) {
        this.txtDisplay = txtDisplay;
    }

    /**
     * Set up when user when to create new file
     *
     * @No param
     * @No retrun
     */
    public void newFile() {
        //set title for new file
        setTitle("Untitled.txt");

        txtDisplay.setText("");
        isSave = true;
        //clear old memory about undo, redo 
        undoManager.discardAllEdits();
        //setup enable button
        disableMenuItems();
        eventDocumentListener();
    }

    /**
     * Open a file
     *
     * @No param
     * @No return
     */
    private void openFile() {
        //create object JFileChooser
        JFileChooser chooser = new JFileChooser(defaultPath);
        chooser.setDialogTitle("Open");

        // add default JFileChooser is txt file
        chooser.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));
        if (chooser.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            txtDisplay.setText("");

            // get path of choose file
            String filePath = chooser.getSelectedFile().getPath();
            //set name of Frame
            setTitle(chooser.getSelectedFile().getName());

            // display into txtDisplay
            txtDisplay.setText(fileController.readFile(filePath));

            //file is opened also is file is saved
            isSave = true;
        }
    }

    /**
     * Event check when can undo, when can redo
     *
     * @No param
     * @No return
     */
    private void eventDocumentListener() {

        //event when user click item undo and item redo
        txtDisplay.getDocument().addUndoableEditListener((UndoableEditEvent e) -> {
            undoManager.addEdit(e.getEdit());
            disableMenuItems();
        });

        //event when user typing data on Text Area
        txtDisplay.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                disableMenuItems();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                disableMenuItems();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
                disableMenuItems();
            }
        });
    }

    /**
     * Function control items in menu Edit
     *
     * @No param
     * @No return
     */
    public void disableMenuItems() {
        //if can undo, enabled item undo 
        if (undoManager.canUndo()) {
            itemUndo.setEnabled(true);
            isSave = false;
        } else {
            itemUndo.setEnabled(false);
            isSave = true;
        }

        //if can redo, enabled item redo 
        if (undoManager.canRedo()) {
            itemRedo.setEnabled(true);

        } else {
            itemRedo.setEnabled(false);
        }

        //if textArea is empty so can not use button find
        if (txtDisplay.getText().isEmpty()) {
            itemFind.setEnabled(false);
        } else {
            itemFind.setEnabled(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtDisplay = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuFile = new javax.swing.JMenu();
        itemNew = new javax.swing.JMenuItem();
        itemOpen = new javax.swing.JMenuItem();
        itemSave = new javax.swing.JMenuItem();
        itemSaveAs = new javax.swing.JMenuItem();
        itemExit = new javax.swing.JMenuItem();
        menuEdit = new javax.swing.JMenu();
        itemSelectAll = new javax.swing.JMenuItem();
        itemCut = new javax.swing.JMenuItem();
        itemCopy = new javax.swing.JMenuItem();
        itemPaste = new javax.swing.JMenuItem();
        itemUndo = new javax.swing.JMenuItem();
        itemRedo = new javax.swing.JMenuItem();
        itemFind = new javax.swing.JMenuItem();
        itemReplace = new javax.swing.JMenuItem();
        itemChangeFont = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtDisplay.setColumns(20);
        txtDisplay.setLineWrap(true);
        txtDisplay.setRows(5);
        jScrollPane1.setViewportView(txtDisplay);

        menuFile.setText("File");

        itemNew.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        itemNew.setText("New");
        itemNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemNewActionPerformed(evt);
            }
        });
        menuFile.add(itemNew);

        itemOpen.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        itemOpen.setText("Open");
        itemOpen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemOpenActionPerformed(evt);
            }
        });
        menuFile.add(itemOpen);

        itemSave.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        itemSave.setText("Save");
        itemSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSaveActionPerformed(evt);
            }
        });
        menuFile.add(itemSave);

        itemSaveAs.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        itemSaveAs.setText("Save as");
        itemSaveAs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSaveAsActionPerformed(evt);
            }
        });
        menuFile.add(itemSaveAs);

        itemExit.setText("Exit");
        itemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemExitActionPerformed(evt);
            }
        });
        menuFile.add(itemExit);

        jMenuBar1.add(menuFile);

        menuEdit.setText("Edit");
        menuEdit.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                menuEditMenuSelected(evt);
            }
        });

        itemSelectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        itemSelectAll.setText("Select All");
        itemSelectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemSelectAllActionPerformed(evt);
            }
        });
        menuEdit.add(itemSelectAll);

        itemCut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.CTRL_MASK));
        itemCut.setText("Cut");
        itemCut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCutActionPerformed(evt);
            }
        });
        menuEdit.add(itemCut);

        itemCopy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        itemCopy.setText("Copy");
        itemCopy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemCopyActionPerformed(evt);
            }
        });
        menuEdit.add(itemCopy);

        itemPaste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.CTRL_MASK));
        itemPaste.setText("Paste");
        itemPaste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemPasteActionPerformed(evt);
            }
        });
        menuEdit.add(itemPaste);

        itemUndo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.CTRL_MASK));
        itemUndo.setText("Undo");
        itemUndo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemUndoActionPerformed(evt);
            }
        });
        menuEdit.add(itemUndo);

        itemRedo.setText("Redo");
        itemRedo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemRedoActionPerformed(evt);
            }
        });
        menuEdit.add(itemRedo);

        itemFind.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F, java.awt.event.InputEvent.CTRL_MASK));
        itemFind.setText("Find");
        itemFind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemFindActionPerformed(evt);
            }
        });
        menuEdit.add(itemFind);

        itemReplace.setText("Replace");
        itemReplace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemReplaceActionPerformed(evt);
            }
        });
        menuEdit.add(itemReplace);

        itemChangeFont.setText("Change font");
        itemChangeFont.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                itemChangeFontActionPerformed(evt);
            }
        });
        menuEdit.add(itemChangeFont);

        jMenuBar1.add(menuEdit);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 564, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
/**
     * Event when click item New
     *
     * @param evt
     */
    private void itemNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemNewActionPerformed
        //if current file is saved, then call funtion open file
        if (isSave) {
            newFile();
        } //if current file is not saved asking user saving current file or not
        else {
            int opt = JOptionPane.showConfirmDialog(this, "Do you want to save changes to "
                    + this.getTitle() + "?", "My Text Editor", JOptionPane.YES_NO_CANCEL_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                fileController.writeFile(defaultPath + "\\" + getTitle(), txtDisplay.getText());
                newFile();
            } else if (opt == JOptionPane.NO_OPTION) {
                newFile();
            }
        }
    }//GEN-LAST:event_itemNewActionPerformed
    /**
     * Event when click item Open
     *
     * @param evt
     */
    private void itemOpenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemOpenActionPerformed
        //if current file is saved, then call funtion open file
        if (isSave) {
            openFile();
        } //if current file is not saved asking user saving current file or not
        else {
            int opt = JOptionPane.showConfirmDialog(this, "Do you want to save changes to "
                    + this.getTitle() + "?", "My Text Editor", JOptionPane.YES_NO_CANCEL_OPTION);
            if (opt == JOptionPane.YES_OPTION) {
                fileController.writeFile(defaultPath + "\\" + getTitle(), txtDisplay.getText());
                openFile();
            }
            if (opt == JOptionPane.NO_OPTION) {
                openFile();
            }
        }
    }//GEN-LAST:event_itemOpenActionPerformed
    /**
     * Event when click item Save
     *
     * @param evt
     */
    private void itemSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSaveActionPerformed
        fileController.writeFile(defaultPath + "\\" + getTitle(), txtDisplay.getText());
        isSave = true;
        System.out.println(defaultPath + "\\" + getTitle());
    }//GEN-LAST:event_itemSaveActionPerformed
    /**
     * Event when click item Save As
     *
     * @param evt
     */
    private void itemSaveAsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSaveAsActionPerformed
        //create object JFileChooser
        JFileChooser fc = new JFileChooser(defaultPath);

        // add default type of file in JFileChooser is txt file
        fc.setFileFilter(new FileNameExtensionFilter("*.txt", "txt"));

        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            String filepath = fc.getSelectedFile().getPath() + ".txt";
            fileController.writeFile(filepath, txtDisplay.getText());
            this.setTitle(fc.getSelectedFile().getName());
            isSave = true;
        }
    }//GEN-LAST:event_itemSaveAsActionPerformed

    private void itemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemExitActionPerformed
        //if file is saved, then close program
        if (isSave) {
            System.exit(0);
        } //if file is not saved, asking user want save file or not
        else {
            int opt = JOptionPane.showConfirmDialog(this, "Do you want to save changes to " + getTitle()
                    + "?", "My Text Editor", JOptionPane.YES_NO_CANCEL_OPTION);
            if (opt == JOptionPane.YES_OPTION) {

                //call function write file
                fileController.writeFile(defaultPath + "\\" + getTitle(), txtDisplay.getText());
                System.exit(0);
            } else if (opt == JOptionPane.NO_OPTION) {
                System.exit(0);
            }
        }
    }//GEN-LAST:event_itemExitActionPerformed

    private void itemSelectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemSelectAllActionPerformed
        txtDisplay.selectAll();
    }//GEN-LAST:event_itemSelectAllActionPerformed

    private void itemCutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCutActionPerformed
        txtDisplay.cut();
    }//GEN-LAST:event_itemCutActionPerformed

    private void itemCopyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemCopyActionPerformed
        txtDisplay.copy();
    }//GEN-LAST:event_itemCopyActionPerformed

    private void itemPasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemPasteActionPerformed
        txtDisplay.paste();
    }//GEN-LAST:event_itemPasteActionPerformed

    private void itemUndoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemUndoActionPerformed
        // Undo text if canUndo
        if (undoManager.canUndo()) {
            undoManager.undo();
        }
    }//GEN-LAST:event_itemUndoActionPerformed

    private void itemRedoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemRedoActionPerformed
        // Undo text if canRedo
        if (undoManager.canRedo()) {
            undoManager.redo();
        }
    }//GEN-LAST:event_itemRedoActionPerformed

    private void itemFindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemFindActionPerformed
        FindFrame findScreen = new FindFrame(this);
        findScreen.setVisible(true);
    }//GEN-LAST:event_itemFindActionPerformed

    private void itemReplaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemReplaceActionPerformed
        ReplaceFrame replaceScreen = new ReplaceFrame(this);
        replaceScreen.setVisible(true);
    }//GEN-LAST:event_itemReplaceActionPerformed

    private void itemChangeFontActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_itemChangeFontActionPerformed
        ChangeFrontFrame fontScreen = new ChangeFrontFrame(this);
        fontScreen.setVisible(true);
    }//GEN-LAST:event_itemChangeFontActionPerformed

    private void menuEditMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_menuEditMenuSelected
        if (txtDisplay.getSelectedText() == null) {
            itemCut.setEnabled(false);
            itemCopy.setEnabled(false);
        } else {
            itemCut.setEnabled(true);
            itemCopy.setEnabled(true);
        }
        itemPaste.setEnabled(true);
    }//GEN-LAST:event_menuEditMenuSelected

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TextEditorFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TextEditorFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem itemChangeFont;
    private javax.swing.JMenuItem itemCopy;
    private javax.swing.JMenuItem itemCut;
    private javax.swing.JMenuItem itemExit;
    private javax.swing.JMenuItem itemFind;
    private javax.swing.JMenuItem itemNew;
    private javax.swing.JMenuItem itemOpen;
    private javax.swing.JMenuItem itemPaste;
    private javax.swing.JMenuItem itemRedo;
    private javax.swing.JMenuItem itemReplace;
    private javax.swing.JMenuItem itemSave;
    private javax.swing.JMenuItem itemSaveAs;
    private javax.swing.JMenuItem itemSelectAll;
    private javax.swing.JMenuItem itemUndo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JMenu menuEdit;
    private javax.swing.JMenu menuFile;
    private javax.swing.JTextArea txtDisplay;
    // End of variables declaration//GEN-END:variables
}
